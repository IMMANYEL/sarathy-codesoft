import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
from sklearn.model_selection import StratifiedKFold, GridSearchCV, train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

import warnings
warnings.filterwarnings("ignore")

# Load Iris dataset from sklearn
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='species')

# Map target integers to species names for easier interpretation
species_map = dict(enumerate(iris.target_names))
y_named = y.map(species_map)

# Combine features and target for EDA
df = pd.concat([X, y_named.rename('species')], axis=1)

# ------------------------
# Exploratory Data Analysis
# ------------------------

print("Dataset head:")
print(df.head())

print("\nDataset info:")
print(df.info())

print("\nClass distribution:")
print(df['species'].value_counts())

# Pairplot to visualize relationships
sns.pairplot(df, hue='species', palette='Set2')
plt.suptitle("Pairplot of Iris Features", y=1.02)
plt.show()

# Boxplots for each feature by species
features = iris.feature_names
plt.figure(figsize=(14,10))
for i, feature in enumerate(features, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(x='species', y=feature, data=df, palette='Set3')
    plt.title(f'Boxplot of {feature.title()} by Species')
plt.tight_layout()
plt.show()

# Correlation heatmap (numeric features only)
plt.figure(figsize=(8,6))
sns.heatmap(X.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()

# PCA for visualization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8,6))
sns.scatterplot(x=X_pca[:,0], y=X_pca[:,1], hue=y_named, palette='Set1', s=70)
plt.title("PCA Projection of Iris Dataset")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.legend(title='Species')
plt.show()

# ------------------------
# Model Training and Evaluation
# ------------------------

# Define models and hyperparameters for GridSearchCV
models = {
    'Logistic Regression': {
        'model': LogisticRegression(max_iter=500, multi_class='multinomial', solver='saga'),
        'params': {
            'C': [0.01, 0.1, 1, 10],
            'penalty': ['l1', 'l2']
        }
    },
    'Decision Tree': {
        'model': DecisionTreeClassifier(random_state=42),
        'params': {
            'max_depth': [3, 5, 10, None],
            'min_samples_split': [2, 5, 10]
        }
    },
    'Random Forest': {
        'model': RandomForestClassifier(random_state=42),
        'params': {
            'n_estimators': [50, 100, 200],
            'max_depth': [None, 5, 10],
            'min_samples_split': [2, 5, 10]
        }
    },
    'SVM': {
        'model': SVC(probability=True, random_state=42),
        'params': {
            'C': [0.1, 1, 10],
            'kernel': ['linear', 'rbf']
        }
    }
}

# Split data into train and test sets with stratification
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, stratify=y, random_state=42)

# Perform GridSearchCV for each model and collect results
results = []
for name, mp in models.items():
    print(f"Training and tuning {name}...")
    grid = GridSearchCV(mp['model'], mp['params'], cv=5, scoring='accuracy')
    grid.fit(X_train, y_train)
    print(f"Best params for {name}: {grid.best_params_}")
    print(f"Best CV accuracy for {name}: {grid.best_score_:.4f}\n")
    results.append((name, grid.best_estimator_))

# Evaluate best models on test set
for name, model in results:
    y_pred = model.predict(X_test)
    print(f"--- {name} Test Set Performance ---")
    print(classification_report(y_test, y_pred, target_names=iris.target_names))
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=iris.target_names, yticklabels=iris.target_names)
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title(f'Confusion Matrix for {name}')
    plt.show()
